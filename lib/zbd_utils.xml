<unit><comment>// SPDX-License-Identifier: LGPL-3.0-or-later
<unit><comment>/* * SPDX-FileCopyrightText: 2020 Western Digital Corporation or its affiliates. * * Authors: Damien Le Moal (damien.lemoal@wdc.com) *	    Ting Yao &lt;tingyao@hust.edu.cn&gt; */
<unit><cpp:include>#
<unit><cpp:include><cpp:directive>include
<unit><cpp:include><cpp:file>"zbd.h"
<unit><cpp:include>#
<unit><cpp:include><cpp:directive>include
<unit><cpp:include><cpp:file>&lt;stdio.h&gt;
<unit><cpp:include>#
<unit><cpp:include><cpp:directive>include
<unit><cpp:include><cpp:file>&lt;stdlib.h&gt;
<unit><cpp:include>#
<unit><cpp:include><cpp:directive>include
<unit><cpp:include><cpp:file>&lt;string.h&gt;
<unit><cpp:include>#
<unit><cpp:include><cpp:directive>include
<unit><cpp:include><cpp:file>&lt;errno.h&gt;
<unit><cpp:include>#
<unit><cpp:include><cpp:directive>include
<unit><cpp:include><cpp:file>&lt;limits.h&gt;
<unit><comment>/* * Log level. */
<unit><decl_stmt><decl><type><name>__thread
<unit><decl_stmt><decl><type><name>int
<unit><decl_stmt><decl><name>zbd_log_level
<unit><decl_stmt><decl><init>= 
<unit><decl_stmt><decl><init><expr><name>ZBD_LOG_NONE
<unit><decl_stmt>;
<unit><function><type><name>void
<unit><function><name>zbd_set_log_level
<unit><function><parameter_list>(
<unit><function><parameter_list><parameter><decl><type><name><name>enum
<unit><function><parameter_list><parameter><decl><type><name><name>zbd_log_level
<unit><function><parameter_list><parameter><decl><name>level
<unit><function><parameter_list>)
<unit><function><block>{
<unit><function><block><block_content><switch>switch 
<unit><function><block><block_content><switch><condition>(
<unit><function><block><block_content><switch><condition><expr><name>level
<unit><function><block><block_content><switch><condition>)
<unit><function><block><block_content><switch><block>{
<unit><function><block><block_content><switch><block><block_content><case>case 
<unit><function><block><block_content><switch><block><block_content><case><expr><name>ZBD_LOG_NONE
<unit><function><block><block_content><switch><block><block_content><case>:
<unit><function><block><block_content><switch><block><block_content><case>case 
<unit><function><block><block_content><switch><block><block_content><case><expr><name>ZBD_LOG_ERROR
<unit><function><block><block_content><switch><block><block_content><case>:
<unit><function><block><block_content><switch><block><block_content><case>case 
<unit><function><block><block_content><switch><block><block_content><case><expr><name>ZBD_LOG_DEBUG
<unit><function><block><block_content><switch><block><block_content><case>:
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><name>zbd_log_level
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><operator>=
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><name>level
<unit><function><block><block_content><switch><block><block_content><expr_stmt>;
<unit><function><block><block_content><switch><block><block_content><break>break;
<unit><function><block><block_content><switch><block><block_content><default>default:
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><call><name>fprintf
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><call><argument_list>(
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>stderr
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><call><argument_list>, 
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><literal>"libzbd: Invalid log level %d\n"
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><call><argument_list>,			
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>level
<unit><function><block><block_content><switch><block><block_content><expr_stmt><expr><call><argument_list>)
<unit><function><block><block_content><switch><block><block_content><expr_stmt>;
<unit><function><block><block_content><switch><block><block_content><break>break;
<unit><function><block><block_content><switch><block>}
<unit><function><block>}
<unit><comment>/* * To handle string conversions. */
<unit><struct>struct 
<unit><struct><name>zbd_str
<unit><struct><block>{	
<unit><struct><block><decl_stmt><decl><type><name>unsigned
<unit><struct><block><decl_stmt><decl><type><name>int
<unit><struct><block><decl_stmt><decl><name>val
<unit><struct><block><decl_stmt>;
<unit><struct><block><decl_stmt><decl><type><specifier>const
<unit><struct><block><decl_stmt><decl><type><name>char
<unit><struct><block><decl_stmt><decl><type><modifier>*
<unit><struct><block><decl_stmt><decl><name>str
<unit><struct><block><decl_stmt>;
<unit><struct><block><decl_stmt><decl><type><specifier>const
<unit><struct><block><decl_stmt><decl><type><name>char
<unit><struct><block><decl_stmt><decl><type><modifier>*
<unit><struct><block><decl_stmt><decl><name>str_short
<unit><struct><block><decl_stmt>;
<unit><struct><block>}
<unit><struct>;
<unit><function><type><specifier>static
<unit><function><type><specifier>const
<unit><function><type><name>char
<unit><function><type><modifier>*
<unit><function><name>zbd_get_str
<unit><function><parameter_list>(
<unit><function><parameter_list><parameter><decl><type><name><name>struct
<unit><function><parameter_list><parameter><decl><type><name><name>zbd_str
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>str
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><name>unsigned
<unit><function><parameter_list><parameter><decl><type><name>int
<unit><function><parameter_list><parameter><decl><name>val
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><name>bool
<unit><function><parameter_list><parameter><decl><name>s
<unit><function><parameter_list>)
<unit><function><block>{
<unit><function><block><block_content><decl_stmt><decl><type><name>unsigned
<unit><function><block><block_content><decl_stmt><decl><type><name>int
<unit><function><block><block_content><decl_stmt><decl><name>i
<unit><function><block><block_content><decl_stmt><decl><init>= 
<unit><function><block><block_content><decl_stmt><decl><init><expr><literal>0
<unit><function><block><block_content><decl_stmt>;
<unit><function><block><block_content><while>while 
<unit><function><block><block_content><while><condition>(
<unit><function><block><block_content><while><condition><expr><name><name>str
<unit><function><block><block_content><while><condition><expr><name><index>[
<unit><function><block><block_content><while><condition><expr><name><index><expr><name>i
<unit><function><block><block_content><while><condition><expr><name><index>]
<unit><function><block><block_content><while><condition><expr><operator>.
<unit><function><block><block_content><while><condition><expr><name>val
<unit><function><block><block_content><while><condition><expr><operator>!=
<unit><function><block><block_content><while><condition><expr><name>UINT_MAX
<unit><function><block><block_content><while><condition>)
<unit><function><block><block_content><while><block>{
<unit><function><block><block_content><while><block><block_content><if_stmt><if>if 
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition>(
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><name>str
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>[
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index><expr><name>i
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>]
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><operator>.
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name>val
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><operator>==
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name>val
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition>)
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><break>break;
<unit><function><block><block_content><while><block><block_content><expr_stmt><expr><name>i
<unit><function><block><block_content><while><block><block_content><expr_stmt><expr><operator>++
<unit><function><block><block_content><while><block><block_content><expr_stmt>;
<unit><function><block><block_content><while><block>}
<unit><function><block><block_content><if_stmt><if>if 
<unit><function><block><block_content><if_stmt><if><condition>(
<unit><function><block><block_content><if_stmt><if><condition><expr><name>s
<unit><function><block><block_content><if_stmt><if><condition>)
<unit><function><block><block_content><if_stmt><if><block><block_content><return>return 
<unit><function><block><block_content><if_stmt><if><block><block_content><return><expr><name><name>str
<unit><function><block><block_content><if_stmt><if><block><block_content><return><expr><name><index>[
<unit><function><block><block_content><if_stmt><if><block><block_content><return><expr><name><index><expr><name>i
<unit><function><block><block_content><if_stmt><if><block><block_content><return><expr><name><index>]
<unit><function><block><block_content><if_stmt><if><block><block_content><return><expr><operator>.
<unit><function><block><block_content><if_stmt><if><block><block_content><return><expr><name>str_short
<unit><function><block><block_content><if_stmt><if><block><block_content><return>;
<unit><function><block><block_content><return>return 
<unit><function><block><block_content><return><expr><name><name>str
<unit><function><block><block_content><return><expr><name><index>[
<unit><function><block><block_content><return><expr><name><index><expr><name>i
<unit><function><block><block_content><return><expr><name><index>]
<unit><function><block><block_content><return><expr><operator>.
<unit><function><block><block_content><return><expr><name>str
<unit><function><block><block_content><return>;
<unit><function><block>}
<unit><decl_stmt><decl><type><specifier>static
<unit><decl_stmt><decl><type><name><name>struct
<unit><decl_stmt><decl><type><name><name>zbd_str
<unit><decl_stmt><decl><name><name>zbd_dm_str
<unit><decl_stmt><decl><name><index>[]
<unit><decl_stmt><decl><init>= 
<unit><decl_stmt><decl><init><expr><block>{	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_DM_HOST_MANAGED
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"host-managed"
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"HM"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_DM_HOST_AWARE
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"host-aware"
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"HA"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_DM_NOT_ZONED
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"not-zoned"
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"NZ"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>UINT_MAX
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"unknown"
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"??"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,}
<unit><decl_stmt>;
<unit><comment>/** * zbd_device_model_str - Returns a device zone model name */
<unit><function><type><specifier>const
<unit><function><type><name>char
<unit><function><type><modifier>*
<unit><function><name>zbd_device_model_str
<unit><function><parameter_list>(
<unit><function><parameter_list><parameter><decl><type><name><name>enum
<unit><function><parameter_list><parameter><decl><type><name><name>zbd_dev_model
<unit><function><parameter_list><parameter><decl><name>model
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><name>bool
<unit><function><parameter_list><parameter><decl><name>s
<unit><function><parameter_list>)
<unit><function><block>{
<unit><function><block><block_content><return>return 
<unit><function><block><block_content><return><expr><call><name>zbd_get_str
<unit><function><block><block_content><return><expr><call><argument_list>(
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>zbd_dm_str
<unit><function><block><block_content><return><expr><call><argument_list>, 
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>model
<unit><function><block><block_content><return><expr><call><argument_list>, 
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>s
<unit><function><block><block_content><return><expr><call><argument_list>)
<unit><function><block><block_content><return>;
<unit><function><block>}
<unit><decl_stmt><decl><type><specifier>static
<unit><decl_stmt><decl><type><name><name>struct
<unit><decl_stmt><decl><type><name><name>zbd_str
<unit><decl_stmt><decl><name><name>zbd_ztype_str
<unit><decl_stmt><decl><name><index>[]
<unit><decl_stmt><decl><init>= 
<unit><decl_stmt><decl><init><expr><block>{	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_TYPE_CNV
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"conventional"
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"cnv"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_TYPE_SWR
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"seq-write-required"
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"swr"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_TYPE_SWP
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"seq-write-preferred"
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"swp"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>UINT_MAX
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"unknown"
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"???"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>}
<unit><decl_stmt>;
<unit><comment>/** * zbd_zone_type_str - returns a string describing a zone type */
<unit><function><type><specifier>const
<unit><function><type><name>char
<unit><function><type><modifier>*
<unit><function><name>zbd_zone_type_str
<unit><function><parameter_list>(
<unit><function><parameter_list><parameter><decl><type><name><name>struct
<unit><function><parameter_list><parameter><decl><type><name><name>zbd_zone
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>z
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><name>bool
<unit><function><parameter_list><parameter><decl><name>s
<unit><function><parameter_list>)
<unit><function><block>{
<unit><function><block><block_content><return>return 
<unit><function><block><block_content><return><expr><call><name>zbd_get_str
<unit><function><block><block_content><return><expr><call><argument_list>(
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>zbd_ztype_str
<unit><function><block><block_content><return><expr><call><argument_list>, 
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name><name>z
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name><operator>-&gt;
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name><name>type
<unit><function><block><block_content><return><expr><call><argument_list>, 
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>s
<unit><function><block><block_content><return><expr><call><argument_list>)
<unit><function><block><block_content><return>;
<unit><function><block>}
<unit><decl_stmt><decl><type><specifier>static
<unit><decl_stmt><decl><type><name><name>struct
<unit><decl_stmt><decl><type><name><name>zbd_str
<unit><decl_stmt><decl><name><name>zbd_zcond_str
<unit><decl_stmt><decl><name><index>[]
<unit><decl_stmt><decl><init>= 
<unit><decl_stmt><decl><init><expr><block>{	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_COND_NOT_WP
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"not-write-pointer"
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"nw"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_COND_EMPTY
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"empty"
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"em"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_COND_FULL
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"full"
<unit><decl_stmt><decl><init><expr><block><expr><block>,			
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"fu"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_COND_IMP_OPEN
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"open-implicit"
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"oi"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_COND_EXP_OPEN
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"open-explicit"
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"oe"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_COND_CLOSED
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"closed"
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"cl"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_COND_READONLY
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"read-only"
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"ro"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>ZBD_ZONE_COND_OFFLINE
<unit><decl_stmt><decl><init><expr><block><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"offline"
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"ol"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>,	
<unit><decl_stmt><decl><init><expr><block><expr><block>{ 
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><name>UINT_MAX
<unit><decl_stmt><decl><init><expr><block><expr><block>,			
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"unknown"
<unit><decl_stmt><decl><init><expr><block><expr><block>,		
<unit><decl_stmt><decl><init><expr><block><expr><block><expr><literal>"??"
<unit><decl_stmt><decl><init><expr><block><expr><block>}
<unit><decl_stmt><decl><init><expr><block>}
<unit><decl_stmt>;
<unit><comment>/** * zbd_zone_cond_str - Returns a string describing a zone condition */
<unit><function><type><specifier>const
<unit><function><type><name>char
<unit><function><type><modifier>*
<unit><function><name>zbd_zone_cond_str
<unit><function><parameter_list>(
<unit><function><parameter_list><parameter><decl><type><name><name>struct
<unit><function><parameter_list><parameter><decl><type><name><name>zbd_zone
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>z
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><name>bool
<unit><function><parameter_list><parameter><decl><name>s
<unit><function><parameter_list>)
<unit><function><block>{
<unit><function><block><block_content><return>return 
<unit><function><block><block_content><return><expr><call><name>zbd_get_str
<unit><function><block><block_content><return><expr><call><argument_list>(
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>zbd_zcond_str
<unit><function><block><block_content><return><expr><call><argument_list>, 
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name><name>z
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name><operator>-&gt;
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name><name>cond
<unit><function><block><block_content><return><expr><call><argument_list>, 
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>s
<unit><function><block><block_content><return><expr><call><argument_list>)
<unit><function><block><block_content><return>;
<unit><function><block>}
<unit><comment>/* * Strip a string of trailing spaces and carriage return. */
<unit><function><type><specifier>static
<unit><function><type><name>int
<unit><function><name>zbd_str_strip
<unit><function><parameter_list>(
<unit><function><parameter_list><parameter><decl><type><name>char
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>str
<unit><function><parameter_list>)
<unit><function><block>{
<unit><function><block><block_content><decl_stmt><decl><type><name>int
<unit><function><block><block_content><decl_stmt><decl><name>len
<unit><function><block><block_content><decl_stmt><decl><init>= 
<unit><function><block><block_content><decl_stmt><decl><init><expr><call><name>strlen
<unit><function><block><block_content><decl_stmt><decl><init><expr><call><argument_list>(
<unit><function><block><block_content><decl_stmt><decl><init><expr><call><argument_list><argument><expr><name>str
<unit><function><block><block_content><decl_stmt><decl><init><expr><call><argument_list>)
<unit><function><block><block_content><decl_stmt><decl><init><expr><operator>-
<unit><function><block><block_content><decl_stmt><decl><init><expr><literal>1
<unit><function><block><block_content><decl_stmt>;
<unit><function><block><block_content><while>while 
<unit><function><block><block_content><while><condition>(
<unit><function><block><block_content><while><condition><expr><name>len
<unit><function><block><block_content><while><condition><expr><operator>&gt;
<unit><function><block><block_content><while><condition><expr><literal>0
<unit><function><block><block_content><while><condition>)
<unit><function><block><block_content><while><block>{
<unit><function><block><block_content><while><block><block_content><if_stmt><if>if 
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition>(
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><name>str
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>[
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index><expr><name>len
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>]
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><operator>==
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><literal>' '
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><operator>||
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><name>str
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>[
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index><expr><name>len
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>]
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><operator>==
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><literal>'\t'
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><operator>||
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><name>str
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>[
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index><expr><name>len
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>]
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><operator>==
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><literal>'\r'
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><operator>||
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><name>str
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>[
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index><expr><name>len
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><name><index>]
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><operator>==
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition><expr><literal>'\n'
<unit><function><block><block_content><while><block><block_content><if_stmt><if><condition>)
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block>{
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><name><name>str
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><name><index>[
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><name><index><expr><name>len
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><name><index>]
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><operator>=
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><literal>'\0'
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt>;
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><name>len
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><operator>--
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block><block_content><expr_stmt>;
<unit><function><block><block_content><while><block><block_content><if_stmt><if><block>}
<unit><function><block><block_content><while><block><block_content><if_stmt><else>else 
<unit><function><block><block_content><while><block><block_content><if_stmt><else><block>{
<unit><function><block><block_content><while><block><block_content><if_stmt><else><block><block_content><break>break;
<unit><function><block><block_content><while><block><block_content><if_stmt><else><block>}
<unit><function><block><block_content><while><block>}
<unit><function><block><block_content><return>return 
<unit><function><block><block_content><return><expr><name>len
<unit><function><block><block_content><return>;
<unit><function><block>}
<unit><function><type><specifier>static
<unit><function><type><name>int
<unit><function><name>zbd_get_sysfs_attr
<unit><function><parameter_list>(
<unit><function><parameter_list><parameter><decl><type><name>char
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>devname
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><specifier>const
<unit><function><parameter_list><parameter><decl><type><name>char
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>attr
<unit><function><parameter_list>,			      
<unit><function><parameter_list><parameter><decl><type><name>char
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>str
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><name>int
<unit><function><parameter_list><parameter><decl><name>str_len
<unit><function><parameter_list>)
<unit><function><block>{
<unit><function><block><block_content><decl_stmt><decl><type><name>char
<unit><function><block><block_content><decl_stmt><decl><name><name>attr_path
<unit><function><block><block_content><decl_stmt><decl><name><index>[
<unit><function><block><block_content><decl_stmt><decl><name><index><expr><literal>128
<unit><function><block><block_content><decl_stmt><decl><name><index>]
<unit><function><block><block_content><decl_stmt>;
<unit><function><block><block_content><decl_stmt><decl><type><name>FILE
<unit><function><block><block_content><decl_stmt><decl><type><modifier>*
<unit><function><block><block_content><decl_stmt><decl><name>file
<unit><function><block><block_content><decl_stmt>;
<unit><function><block><block_content><decl_stmt><decl><type><name>int
<unit><function><block><block_content><decl_stmt><decl><name>ret
<unit><function><block><block_content><decl_stmt><decl><init>= 
<unit><function><block><block_content><decl_stmt><decl><init><expr><literal>0
<unit><function><block><block_content><decl_stmt>;
<unit><function><block><block_content><expr_stmt><expr><call><name>snprintf
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>(
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>attr_path
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>, 
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><sizeof>sizeof
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><sizeof><argument_list>(
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><sizeof><argument_list><argument><expr><name>attr_path
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><sizeof><argument_list>)
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>, 
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><literal>"/sys/block/%s/%s"
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>,		 
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>devname
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>, 
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>attr
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>)
<unit><function><block><block_content><expr_stmt>;
<unit><function><block><block_content><expr_stmt><expr><name>file
<unit><function><block><block_content><expr_stmt><expr><operator>=
<unit><function><block><block_content><expr_stmt><expr><call><name>fopen
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>(
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>attr_path
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>, 
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><literal>"r"
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>)
<unit><function><block><block_content><expr_stmt>;
<unit><function><block><block_content><if_stmt><if>if 
<unit><function><block><block_content><if_stmt><if><condition>(
<unit><function><block><block_content><if_stmt><if><condition><expr><operator>!
<unit><function><block><block_content><if_stmt><if><condition><expr><name>file
<unit><function><block><block_content><if_stmt><if><condition>)
<unit><function><block><block_content><if_stmt><if><block><block_content><return>return 
<unit><function><block><block_content><if_stmt><if><block><block_content><return><expr><operator>-
<unit><function><block><block_content><if_stmt><if><block><block_content><return><expr><name>ENOENT
<unit><function><block><block_content><if_stmt><if><block><block_content><return>;
<unit><function><block><block_content><if_stmt><if>if 
<unit><function><block><block_content><if_stmt><if><condition>(
<unit><function><block><block_content><if_stmt><if><condition><expr><operator>!
<unit><function><block><block_content><if_stmt><if><condition><expr><call><name>fgets
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list>(
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list><argument><expr><name>str
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list>, 
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list><argument><expr><name>str_len
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list>, 
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list><argument><expr><name>file
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list>)
<unit><function><block><block_content><if_stmt><if><condition>)
<unit><function><block><block_content><if_stmt><if><block>{
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><name>ret
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><operator>=
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><operator>-
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><name>EINVAL
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt>;
<unit><function><block><block_content><if_stmt><if><block><block_content><goto>goto 
<unit><function><block><block_content><if_stmt><if><block><block_content><goto><name>close
<unit><function><block><block_content><if_stmt><if><block><block_content><goto>;
<unit><function><block><block_content><if_stmt><if><block>}
<unit><function><block><block_content><if_stmt><if>if 
<unit><function><block><block_content><if_stmt><if><condition>(
<unit><function><block><block_content><if_stmt><if><condition><expr><operator>!
<unit><function><block><block_content><if_stmt><if><condition><expr><call><name>zbd_str_strip
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list>(
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list><argument><expr><name>str
<unit><function><block><block_content><if_stmt><if><condition><expr><call><argument_list>)
<unit><function><block><block_content><if_stmt><if><condition>)
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><name>ret
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><operator>=
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><operator>-
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt><expr><name>EINVAL
<unit><function><block><block_content><if_stmt><if><block><block_content><expr_stmt>;
<unit><function><block><block_content><label><name>close
<unit><function><block><block_content><label>:
<unit><function><block><block_content><expr_stmt><expr><call><name>fclose
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>(
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>file
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>)
<unit><function><block><block_content><expr_stmt>;
<unit><function><block><block_content><return>return 
<unit><function><block><block_content><return><expr><name>ret
<unit><function><block><block_content><return>;
<unit><function><block>}
<unit><function><type><name>int
<unit><function><name>zbd_get_sysfs_attr_int64
<unit><function><parameter_list>(
<unit><function><parameter_list><parameter><decl><type><name>char
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>devname
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><specifier>const
<unit><function><parameter_list><parameter><decl><type><name>char
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>attr
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><name>long
<unit><function><parameter_list><parameter><decl><type><name>long
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>val
<unit><function><parameter_list>)
<unit><function><block>{
<unit><function><block><block_content><decl_stmt><decl><type><name>char
<unit><function><block><block_content><decl_stmt><decl><name><name>str
<unit><function><block><block_content><decl_stmt><decl><name><index>[
<unit><function><block><block_content><decl_stmt><decl><name><index><expr><literal>128
<unit><function><block><block_content><decl_stmt><decl><name><index>]
<unit><function><block><block_content><decl_stmt>;
<unit><function><block><block_content><decl_stmt><decl><type><name>int
<unit><function><block><block_content><decl_stmt><decl><name>ret
<unit><function><block><block_content><decl_stmt>;
<unit><function><block><block_content><expr_stmt><expr><name>ret
<unit><function><block><block_content><expr_stmt><expr><operator>=
<unit><function><block><block_content><expr_stmt><expr><call><name>zbd_get_sysfs_attr
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>(
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>devname
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>, 
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>attr
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>, 
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>str
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>, 
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><literal>128
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>)
<unit><function><block><block_content><expr_stmt>;
<unit><function><block><block_content><if_stmt><if>if 
<unit><function><block><block_content><if_stmt><if><condition>(
<unit><function><block><block_content><if_stmt><if><condition><expr><name>ret
<unit><function><block><block_content><if_stmt><if><condition>)
<unit><function><block><block_content><if_stmt><if><block><block_content><return>return 
<unit><function><block><block_content><if_stmt><if><block><block_content><return><expr><name>ret
<unit><function><block><block_content><if_stmt><if><block><block_content><return>;
<unit><function><block><block_content><expr_stmt><expr><operator>*
<unit><function><block><block_content><expr_stmt><expr><name>val
<unit><function><block><block_content><expr_stmt><expr><operator>=
<unit><function><block><block_content><expr_stmt><expr><call><name>atoll
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>(
<unit><function><block><block_content><expr_stmt><expr><call><argument_list><argument><expr><name>str
<unit><function><block><block_content><expr_stmt><expr><call><argument_list>)
<unit><function><block><block_content><expr_stmt>;
<unit><function><block><block_content><return>return 
<unit><function><block><block_content><return><expr><literal>0
<unit><function><block><block_content><return>;
<unit><function><block>}
<unit><function><type><name>int
<unit><function><name>zbd_get_sysfs_attr_str
<unit><function><parameter_list>(
<unit><function><parameter_list><parameter><decl><type><name>char
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>devname
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><specifier>const
<unit><function><parameter_list><parameter><decl><type><name>char
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>attr
<unit><function><parameter_list>,			   
<unit><function><parameter_list><parameter><decl><type><name>char
<unit><function><parameter_list><parameter><decl><type><modifier>*
<unit><function><parameter_list><parameter><decl><name>val
<unit><function><parameter_list>, 
<unit><function><parameter_list><parameter><decl><type><name>int
<unit><function><parameter_list><parameter><decl><name>val_len
<unit><function><parameter_list>)
<unit><function><block>{
<unit><function><block><block_content><return>return 
<unit><function><block><block_content><return><expr><call><name>zbd_get_sysfs_attr
<unit><function><block><block_content><return><expr><call><argument_list>(
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>devname
<unit><function><block><block_content><return><expr><call><argument_list>, 
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>attr
<unit><function><block><block_content><return><expr><call><argument_list>, 
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>val
<unit><function><block><block_content><return><expr><call><argument_list>, 
<unit><function><block><block_content><return><expr><call><argument_list><argument><expr><name>val_len
<unit><function><block><block_content><return><expr><call><argument_list>)
<unit><function><block><block_content><return>;
<unit><function><block>}
